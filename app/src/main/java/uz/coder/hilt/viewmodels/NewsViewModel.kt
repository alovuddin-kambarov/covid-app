package uz.coder.hilt.viewmodelsimport android.content.Contextimport android.widget.Toastimport androidx.lifecycle.*import dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.launchimport uz.coder.hilt.database.entity.NewsEntityimport uz.coder.hilt.repository.NewsRepositoryimport uz.coder.hilt.utils.NetworkHelperimport uz.coder.hilt.utils.NewsResourceimport javax.inject.Inject@HiltViewModelclass NewsViewModel @Inject constructor(    private val newsRepository: NewsRepository,    private val networkHelper: NetworkHelper) : ViewModel() {    private val liveData = MutableLiveData<NewsResource>(NewsResource.Loading)    fun getNewsAndArticle(): MutableLiveData<NewsResource> {        viewModelScope.launch {            if (networkHelper.isNetworkConnected()) {                liveData.value = NewsResource.Loading                val flow = newsRepository.getNewsFromApi()                flow.catch {                    liveData.value = NewsResource.Error(it.message ?: "Error")                }.collect {                    if (it.isSuccessful) {                        val arrayList = ArrayList<NewsEntity>()                        it.body()?.articles?.forEach { article ->                            if (article.url != null && article.urlToImage != null && article.title != null && article.description != null && article.content != null) {                                arrayList.add(                                    NewsEntity(                                        article.url,                                        article.urlToImage.toString(),                                        "BBC",                                        article.title,                                        article.description,                                        article.content.toString(),                                        "publishedAt",                                        0                                    )                                )                            }                            newsRepository.insertNewsToDb(arrayList)                        }                        liveData.value = NewsResource.Success(newsRepository.getDbNews())                    } else {                        liveData.value = NewsResource.Error(it.raw().toString())                    }                }            } else {                if (newsRepository.getDbNews().isNotEmpty())                    liveData.value = NewsResource.Success(newsRepository.getDbNews())                else                    liveData.value = NewsResource.Error("No connection internet")            }        }        return liveData    }    fun getSavedNews(): LiveData<List<NewsEntity>> = newsRepository.getSavedNews().asLiveData()    fun insertSavedNews(newsEntity: List<NewsEntity>) {        viewModelScope.launch {            newsRepository.insertNewsToDb(newsEntity)        }    }}